# -*- coding: utf-8 -*-
"""clothing_condition_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SbcQDCO13Hc7J73ebFasGMTdW23tf4CR
"""

clothing_condition_classifier.py
import os
import random
import torch
import torch.nn as nn
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
from torchvision import models, datasets
from torchvision.models import ResNet50_Weights
from torch.utils.data import DataLoader, Subset

# Important for replicability during data splitting and subsequent training
SEED = 42
random.seed(SEED)
torch.manual_seed(SEED)

data_set = r"C:\Users\admin\Desktop\clothes_dataset"

# Check if dataset exists
if not os.path.exists(data_set):
    raise FileNotFoundError(f"Dataset path does not exist: {data_set}")

# Check if dataset contains valid image files
for class_folder in os.listdir(data_set):
    class_path = os.path.join(data_set, class_folder)
    if os.path.isdir(class_path):
        images = [f for f in os.listdir(class_path) if f.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp'))]
        if not images:
            raise FileNotFoundError(f"No valid images found in: {class_path}")

print("Dataset structure is valid. Proceeding with training...")

# Define data augmentation & normalization
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(15),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Load dataset
data = datasets.ImageFolder(data_set, transform=transform)

# Check dataset size before proceeding
print(f"Total images in dataset: {len(data)}")
if len(data) == 0:
    raise ValueError("Dataset is empty. Ensure images are present in the class folders.")

# Data split (70/15/15)
class_indices = {class_idx: [] for class_idx in range(len(data.classes))}

for idx, (_, label) in enumerate(data.samples):
    class_indices[label].append(idx)

train_indices, val_indices, test_indices = [], [], []

for class_idx, indices in class_indices.items():
    random.shuffle(indices)
    train_size = int(0.7 * len(indices))
    val_size = int(0.15 * len(indices))
    test_size = len(indices) - train_size - val_size

    train_indices.extend(indices[:train_size])
    val_indices.extend(indices[train_size:train_size + val_size])
    test_indices.extend(indices[train_size + val_size:])

# Create subsets based on calculated indices
train_set = Subset(data, train_indices)
val_set = Subset(data, val_indices)
test_set = Subset(data, test_indices)

# Print dataset split sizes
print(f"Training samples: {len(train_set)}, Validation samples: {len(val_set)}, Test samples: {len(test_set)}")

batch_size = 128  # Increased batch size

# Set num_workers=0 to avoid DataLoader freezing issues
train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=0)
val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, num_workers=0)
test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=0)

# Detect if GPU is available and use it
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Load pretrained ResNet50 model
model = models.resnet50(weights=ResNet50_Weights.IMAGENET1K_V1)

# Modify last fully connected layer for 3 classes
num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, len(data.classes))

model = model.to(device)

# Define loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-4)

# Training loop with loss & accuracy tracking
num_epochs = 5  # Reduced epochs
train_losses, val_losses = [], []
train_accuracies, val_accuracies = [], []

best_val_loss = float('inf')
epochs_without_improvement = 0
patience = 3  # Stop training if no improvement for 3 epochs

for epoch in range(num_epochs):
    model.train()
    running_loss, correct, total = 0.0, 0, 0

    for batch_idx, (images, labels) in enumerate(train_loader):
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()

        batch_accuracy = 100 * correct / total
        if batch_idx % 5 == 0:
            print(f"Epoch {epoch+1} | Batch {batch_idx}/{len(train_loader)} - Loss: {loss.item():.4f} | Train Acc: {batch_accuracy:.2f}%")

    train_accuracy = 100 * correct / total
    train_losses.append(running_loss / len(train_loader))
    train_accuracies.append(train_accuracy)

    # Validation phase
    model.eval()
    val_loss, val_correct, val_total = 0.0, 0, 0
    with torch.no_grad():
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)

            outputs = model(images)
            loss = criterion(outputs, labels)

            val_loss += loss.item()
            _, predicted = outputs.max(1)
            val_total += labels.size(0)
            val_correct += predicted.eq(labels).sum().item()

    val_accuracy = 100 * val_correct / val_total
    val_losses.append(val_loss / len(val_loader))
    val_accuracies.append(val_accuracy)

    print(f"Epoch {epoch+1}/{num_epochs} | Train Acc: {train_accuracy:.2f}% | Val Acc: {val_accuracy:.2f}% | Val Loss: {val_loss:.4f}")

    # Early stopping check
    if val_loss < best_val_loss:
        best_val_loss = val_loss
        epochs_without_improvement = 0
    else:
        epochs_without_improvement += 1
        if epochs_without_improvement >= patience:
            print(f"Early stopping triggered at epoch {epoch+1}. Stopping training.")
            break

# Evaluate on test set
model.eval()
test_correct, test_total = 0, 0

with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = outputs.max(1)
        test_total += labels.size(0)
        test_correct += predicted.eq(labels).sum().item()

test_accuracy = 100 * test_correct / test_total
print(f"Test Accuracy: {test_accuracy:.2f}%")

# Plot Loss and Accuracy over Epochs
plt.figure(figsize=(12, 5))

# Plot Training & Validation Loss
plt.subplot(1, 2, 1)
plt.plot(range(1, num_epochs+1), train_losses, label='Train Loss', marker='o')
plt.plot(range(1, num_epochs+1), val_losses, label='Val Loss', marker='o')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training & Validation Loss')
plt.legend()

# Plot Training & Validation Accuracy
plt.subplot(1, 2, 2)
plt.plot(range(1, num_epochs+1), train_accuracies, label='Train Accuracy', marker='o')
plt.plot(range(1, num_epochs+1), val_accuracies, label='Val Accuracy', marker='o')
plt.xlabel('Epochs')
plt.ylabel('Accuracy (%)')
plt.title('Training & Validation Accuracy')
plt.legend()

plt.show()

print("Model Training Complete!")